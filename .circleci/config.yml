version: 2

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/fake-user-app
    steps:
      - checkout
      - run:
          name: Create Directory
          command: mkdir -p ~/fake-user-app
      - restore_cache:
          keys:
            - fake-user-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Build
          command: mvn clean package -DskipTests
      - save_cache:
          paths:
            - ~/.m2
          key: fake-user-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: ~/fake-user-app
          paths:
            - .

  test:
    machine: true
    steps:
      - attach_workspace:
          at: ~/fake-user-app
      - checkout
      - run:
          name: Start Test Database
          command: docker run -d --name test-db -p 5432:5432 -e POSTGRES_DB=$TEST_DB -e POSTGRES_USER=$TEST_DB_USERNAME -e POSTGRES_PASSWORD=$TEST_DB_PASSWORD postgres:latest
      - run:
          name: Run Integration Tests with Dummy Database
          command: |
            echo $TEST_DB_URL
            mvn test -Dskip.unit.tests=false -Dskip.integration.tests=false \
                   -Dspring.datasource.url=$TEST_DB_URL \
                   -Dspring.datasource.username=$TEST_DB_USERNAME \
                   -Dspring.datasource.password=$TEST_DB_PASSWORD

  docker-image-create-and-push:
    machine: true
    steps:
      - attach_workspace:
          at: ~/fake-user-app
      - run:
          name: Go to app location
          command: cd ~/fake-user-app
      - run:
          name: Create Docker image
          command: docker build -t $ECR_URL/fake-user-app:latest ~/fake-user-app
      - run:
          name: Login to ECR
          command: aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $ECR_URL
      - run:
          name: Push the image to ECR
          command: docker push $ECR_URL/fake-user-app:latest

  deploy_qa:
    machine: true
    steps:
      - run:
          name: Execute Deployment Script
          command: |
            ssh -o "StrictHostKeyChecking=no" $SSH_USER_QA@$SSH_HOST_QA <<'ENDSSH'
            /bin/bash ~/fake-user-app/deploy_image.sh
            ENDSSH

  deploy_prod:
    machine: true
    steps:
      - run:
          name: Execute Deployment Script
          command: |
            ssh -o "StrictHostKeyChecking=no" $SSH_USER@$SSH_HOST <<'ENDSSH'
            /bin/bash ~/fake-user-app/deploy_image.sh
            ENDSSH

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - docker-image-create-and-push:
          requires:
            - test
      - deploy_qa:
          requires:
            - docker-image-create-and-push
      - deploy_prod:
          requires:
            - deploy_qa
